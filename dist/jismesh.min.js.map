{"version":3,"sources":["webpack://jismesh/webpack/universalModuleDefinition","webpack://jismesh/webpack/bootstrap","webpack://jismesh/./index.js","webpack://jismesh/./src/index.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","_unitLv1Lat","_unitLv1Lon","_unitLv2Lat","_unitLv2Lon","_unitLv3Lat","_unitLv3Lon","_unitLv4Lat","_unitLv4Lon","_unitLv5Lat","_unitLv5Lon","_unitLv6Lat","_unitLv6Lon","_unit40000Lat","_unit40000Lon","_unit20000Lat","_unit20000Lon","_unit16000Lat","_unit16000Lon","_unit8000Lat","_unit8000Lon","_unit5000Lat","_unit5000Lon","_unit4000Lat","_unit4000Lon","_unit2500Lat","_unit2500Lon","_unit2000Lat","_unit2000Lon","_toMeshCodeLv1","lat","lon","y","Math","floor","west","code","String","south","_toMeshCodeLv2","cellLv1","x","_toMeshCodeLv3","cellLv2","_toMeshCodeLv4","cellLv3","_toMeshCodeLv5","cellLv4","_toMeshCode40000","_toMeshCode8000","_toMeshCode5000","_toMeshCodeProcs","1","2","3","4","5","6","cellLv5","40000","20000","cell40000","16000","8000","5000","4000","cell8000","2500","cell5000","2000","toMeshLevel","meshCode","length","charAt","Error","_toMeshPointLv1","parseInt","substring","unitLat","unitLon","_toMeshPointLv2","_toMeshPointLv3","_toMeshPointLv4","_toMeshPointLv5","_toMeshPoint40000","_toMeshPoint8000","_toMeshPoint5000","_toMeshPointProcs","toMeshCode","level","RangeError","toMeshCodeProc","toMeshPoint","latMultiplier","lonMultiplier"],"mappings":"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","file":"jismesh.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"jismesh\"] = factory();\n\telse\n\t\troot[\"jismesh\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","module.exports = require('./src/index');\n","'use strict';\n\nconst _unitLv1Lat = 40/60;\nconst _unitLv1Lon = 1;\nconst _unitLv2Lat = 5/60;\nconst _unitLv2Lon = 7.5/60;\nconst _unitLv3Lat = 30/3600;\nconst _unitLv3Lon = 45/3600;\nconst _unitLv4Lat = 15/3600;\nconst _unitLv4Lon = 22.5/3600;\nconst _unitLv5Lat = 7.5/3600;\nconst _unitLv5Lon = 11.25/3600;\nconst _unitLv6Lat = 3.75/3600;\nconst _unitLv6Lon = 5.625/3600;\nconst _unit40000Lat = 40/120;\nconst _unit40000Lon = 1/2;\nconst _unit20000Lat = 40/240;\nconst _unit20000Lon = 1/4;\nconst _unit16000Lat = 40/300;\nconst _unit16000Lon = 1/5;\nconst _unit8000Lat = 4/60;\nconst _unit8000Lon = 6/60;\nconst _unit5000Lat = 2.5/60;\nconst _unit5000Lon = 3.75/60;\nconst _unit4000Lat = 2/60;\nconst _unit4000Lon = 3/60;\nconst _unit2500Lat = 2.5/120;\nconst _unit2500Lon = 3.75/120;\nconst _unit2000Lat = 1/60;\nconst _unit2000Lon = 1.5/60;\n\nfunction _toMeshCodeLv1(lat, lon) {\n  const y = Math.floor(lat / _unitLv1Lat);\n  const west = Math.floor(lon);\n  const x = west - 100;\n  const code = String(100 * y + x);\n  const south = y * _unitLv1Lat;\n  return { south, west, code };\n}\n\nfunction _toMeshCodeLv2(lat, lon) {\n  const cellLv1 = _toMeshCodeLv1(lat, lon);\n  const y = Math.floor((lat - cellLv1.south) / _unitLv2Lat);\n  const x = Math.floor((lon - cellLv1.west)  / _unitLv2Lon);\n  const code = cellLv1.code + (10 * y + x);\n  const south = cellLv1.south + y * _unitLv2Lat;\n  const west  = cellLv1.west  + x * _unitLv2Lon;\n  return { south, west, code };\n}\n\nfunction _toMeshCodeLv3(lat, lon) {\n  const cellLv2 = _toMeshCodeLv2(lat, lon);\n  const y = Math.floor((lat - cellLv2.south) / _unitLv3Lat);\n  const x = Math.floor((lon - cellLv2.west)  / _unitLv3Lon);\n  const code = cellLv2.code + (10 * y + x);\n  const south = cellLv2.south + y * _unitLv3Lat;\n  const west  = cellLv2.west  + x * _unitLv3Lon;\n  return { south, west, code };\n}\n\nfunction _toMeshCodeLv4(lat, lon) {\n  const cellLv3 = _toMeshCodeLv3(lat, lon);\n  const y = Math.floor((lat - cellLv3.south) / _unitLv4Lat);\n  const x = Math.floor((lon - cellLv3.west)  / _unitLv4Lon);\n  const code = cellLv3.code + (2 * y + x + 1);\n  const south = cellLv3.south + y * _unitLv4Lat;\n  const west  = cellLv3.west  + x * _unitLv4Lon;\n  return { south, west, code };\n}\n\nfunction _toMeshCodeLv5(lat, lon) {\n  const cellLv4 = _toMeshCodeLv4(lat, lon);\n  const y = Math.floor((lat - cellLv4.south) / _unitLv5Lat);\n  const x = Math.floor((lon - cellLv4.west)  / _unitLv5Lon);\n  const code = cellLv4.code + (2 * y + x + 1);\n  const south = cellLv4.south + y * _unitLv5Lat;\n  const west  = cellLv4.west  + x * _unitLv5Lon;\n  return { south, west, code };\n}\n\nfunction _toMeshCodeLv6(lat, lon) {\n  const cellLv5 = _toMeshCodeLv5(lat, lon);\n  const y = Math.floor((lat - cellLv5.south) / _unitLv6Lat);\n  const x = Math.floor((lon - cellLv5.west)  / _unitLv6Lon);\n  const code = cellLv5.code + (2 * y + x + 1);\n  return { code };\n}\n\nfunction _toMeshCode40000(lat, lon) {\n  const cellLv1 = _toMeshCodeLv1(lat, lon);\n  const y = Math.floor((lat - cellLv1.south) / _unit40000Lat);\n  const x = Math.floor((lon - cellLv1.west)  / _unit40000Lon);\n  const code = cellLv1.code + (2 * y + x + 1);\n  const south = cellLv1.south + y * _unit40000Lat;\n  const west  = cellLv1.west  + x * _unit40000Lon;\n  return { south, west, code };\n}\n\nfunction _toMeshCode20000(lat, lon) {\n  const cell40000 = _toMeshCode40000(lat, lon);\n  const y = Math.floor((lat - cell40000.south) / _unit20000Lat);\n  const x = Math.floor((lon - cell40000.west)  / _unit20000Lon);\n  const code = cell40000.code + (2 * y + x + 1) + '5';\n  return { code };\n}\n\nfunction _toMeshCode16000(lat, lon) {\n  const cellLv1 = _toMeshCodeLv1(lat, lon);\n  const y = Math.floor((lat - cellLv1.south) / _unit16000Lat);\n  const x = Math.floor((lon - cellLv1.west)  / _unit16000Lon);\n  const code = cellLv1.code + (10 * (y * 2) + (x * 2)) + '7';\n  return { code };\n}\n\nfunction _toMeshCode8000(lat, lon) {\n  const cellLv1 = _toMeshCodeLv1(lat, lon);\n  const y = Math.floor((lat - cellLv1.south) / _unit8000Lat);\n  const x = Math.floor((lon - cellLv1.west)  / _unit8000Lon);\n  const code = cellLv1.code + (10 * y + x) + '6';\n  const south = cellLv1.south + y * _unit8000Lat;\n  const west  = cellLv1.west  + x * _unit8000Lon;\n  return { south, west, code };\n}\n\nfunction _toMeshCode5000(lat, lon) {\n  const cellLv2 = _toMeshCodeLv2(lat, lon);\n  const y = Math.floor((lat - cellLv2.south) / _unit5000Lat);\n  const x = Math.floor((lon - cellLv2.west)  / _unit5000Lon);\n  const code = cellLv2.code + (2 * y + x + 1);\n  const south = cellLv2.south + y * _unit5000Lat;\n  const west  = cellLv2.west  + x * _unit5000Lon;\n  return { south, west, code };\n}\n\nfunction _toMeshCode4000(lat, lon) {\n  const cell8000 = _toMeshCode8000(lat, lon);\n  const y = Math.floor((lat - cell8000.south) / _unit4000Lat);\n  const x = Math.floor((lon - cell8000.west)  / _unit4000Lon);\n  const code = cell8000.code + (2 * y + x + 1) + '7';\n  return { code };\n}\n\nfunction _toMeshCode2500(lat, lon) {\n  const cell5000 = _toMeshCode5000(lat, lon);\n  const y = Math.floor((lat - cell5000.south) / _unit2500Lat);\n  const x = Math.floor((lon - cell5000.west)  / _unit2500Lon);\n  const code = cell5000.code + (2 * y + x + 1) + '6';\n  return { code };\n}\n\nfunction _toMeshCode2000(lat, lon) {\n  const cellLv2 = _toMeshCodeLv2(lat, lon);\n  const y = Math.floor((lat - cellLv2.south) / _unit2000Lat);\n  const x = Math.floor((lon - cellLv2.west)  / _unit2000Lon);\n  const code = cellLv2.code + (10 * (y * 2) + (x * 2)) + '5';\n  return { code };\n}\n\nconst _toMeshCodeProcs = {\n  1: _toMeshCodeLv1,\n  2: _toMeshCodeLv2,\n  3: _toMeshCodeLv3,\n  4: _toMeshCodeLv4,\n  5: _toMeshCodeLv5,\n  6: _toMeshCodeLv6,\n  40000: _toMeshCode40000,\n  20000: _toMeshCode20000,\n  16000: _toMeshCode16000,\n  8000: _toMeshCode8000,\n  5000: _toMeshCode5000,\n  4000: _toMeshCode4000,\n  2500: _toMeshCode2500,\n  2000: _toMeshCode2000,\n};\n\nfunction toMeshCode(lat, lon, level) {\n  if (lat < 0 || 66.66 <= lat) {\n    throw new RangeError(`Latitude is out of bound: ${lat}`);\n  }\n  if (lon < 100 || 180 <= lon) {\n    throw new RangeError(`Longitude is out of bound: ${lon}`);\n  }\n\n  const toMeshCodeProc = _toMeshCodeProcs[level];\n  if (!toMeshCodeProc) {\n    throw new RangeError(`Unsupported level: ${level}`);\n  }\n\n  return toMeshCodeProc(lat, lon).code;\n}\n\nfunction toMeshLevel(meshCode) {\n  meshCode = String(meshCode);\n\n  switch (meshCode.length) {\n  case 4:\n    return 1;\n  case 5:\n    return 40000;\n  case 6:\n    return 2;\n  case 7:\n    switch (meshCode.charAt(6)) {\n    case '1': case '2': case '3': case '4':\n      return 5000;\n    case '6':\n      return 8000;\n    case '5':\n      return 20000;\n    case '7':\n      return 16000;\n    }\n    break;\n  case 8:\n    return 3;\n  case 9:\n    switch (meshCode.charAt(8)) {\n    case '1': case '2': case '3': case '4':\n      return 4;\n    case '5':\n      return 2000;\n    case '6':\n      return 2500;\n    case '7':\n      return 4000;\n    }\n    break;\n  case 10:\n    switch (meshCode.charAt(9)) {\n    case '1': case '2': case '3': case '4':\n      return 5;\n    }\n    break;\n  case 11:\n    switch (meshCode.charAt(10)) {\n    case '1': case '2': case '3': case '4':\n      return 6;\n    }\n    break;\n  }\n\n  throw new Error(`Unsupported mesh code: ${meshCode}`);\n}\n\nfunction _toMeshPointLv1(meshCode) {\n  const y = parseInt(meshCode.substring(0, 2));\n  const x = parseInt(meshCode.substring(2, 4));\n  const unitLat = _unitLv1Lat;\n  const unitLon = _unitLv1Lon;\n  const south = y * unitLat;\n  const west  = x * unitLon + 100;\n  return { south, west, unitLat, unitLon };\n}\n\nfunction _toMeshPointLv2(meshCode) {\n  const cellLv1 = _toMeshPointLv1(meshCode);\n  const y = parseInt(meshCode.charAt(4));\n  const x = parseInt(meshCode.charAt(5));\n  const unitLat = _unitLv2Lat;\n  const unitLon = _unitLv2Lon;\n  const south = cellLv1.south + y * unitLat;\n  const west  = cellLv1.west  + x * unitLon;\n  return { south, west, unitLat, unitLon };\n}\n\nfunction _toMeshPointLv3(meshCode) {\n  const cellLv2 = _toMeshPointLv2(meshCode);\n  const y = parseInt(meshCode.charAt(6));\n  const x = parseInt(meshCode.charAt(7));\n  const unitLat = _unitLv3Lat;\n  const unitLon = _unitLv3Lon;\n  const south = cellLv2.south + y * unitLat;\n  const west  = cellLv2.west  + x * unitLon;\n  return { south, west, unitLat, unitLon };\n}\n\nfunction _toMeshPointLv4(meshCode) {\n  const cellLv3 = _toMeshPointLv3(meshCode);\n  const c = parseInt(meshCode.charAt(8)) - 1;\n  const y = Math.floor(c / 2);\n  const x = c % 2;\n  const unitLat = _unitLv4Lat;\n  const unitLon = _unitLv4Lon;\n  const south = cellLv3.south + y * unitLat;\n  const west  = cellLv3.west  + x * unitLon;\n  return { south, west, unitLat, unitLon };\n}\n\nfunction _toMeshPointLv5(meshCode) {\n  const cellLv4 = _toMeshPointLv4(meshCode);\n  const c = parseInt(meshCode.charAt(9)) - 1;\n  const y = Math.floor(c / 2);\n  const x = c % 2;\n  const unitLat = _unitLv5Lat;\n  const unitLon = _unitLv5Lon;\n  const south = cellLv4.south + y * unitLat;\n  const west  = cellLv4.west  + x * unitLon;\n  return { south, west, unitLat, unitLon };\n}\n\nfunction _toMeshPointLv6(meshCode) {\n  const cellLv5 = _toMeshPointLv5(meshCode);\n  const c = parseInt(meshCode.charAt(10)) - 1;\n  const y = Math.floor(c / 2);\n  const x = c % 2;\n  const unitLat = _unitLv6Lat;\n  const unitLon = _unitLv6Lon;\n  const south = cellLv5.south + y * unitLat;\n  const west  = cellLv5.west  + x * unitLon;\n  return { south, west, unitLat, unitLon };\n}\n\nfunction _toMeshPoint40000(meshCode) {\n  const cellLv1 = _toMeshPointLv1(meshCode);\n  const c = parseInt(meshCode.charAt(4)) - 1;\n  const y = Math.floor(c / 2);\n  const x = c % 2;\n  const unitLat = _unit40000Lat;\n  const unitLon = _unit40000Lon;\n  const south = cellLv1.south + y * unitLat;\n  const west  = cellLv1.west  + x * unitLon;\n  return { south, west, unitLat, unitLon };\n}\n\nfunction _toMeshPoint20000(meshCode) {\n  const cell40000 = _toMeshPoint40000(meshCode);\n  const c = parseInt(meshCode.charAt(5)) - 1;\n  const y = Math.floor(c / 2);\n  const x = c % 2;\n  const unitLat = _unit20000Lat;\n  const unitLon = _unit20000Lon;\n  const south = cell40000.south + y * unitLat;\n  const west  = cell40000.west  + x * unitLon;\n  return { south, west, unitLat, unitLon };\n}\n\nfunction _toMeshPoint16000(meshCode) {\n  const cellLv1 = _toMeshPointLv1(meshCode);\n  const y = parseInt(meshCode.charAt(4)) / 2;\n  const x = parseInt(meshCode.charAt(5)) / 2;\n  const unitLat = _unit16000Lat;\n  const unitLon = _unit16000Lon;\n  const south = cellLv1.south + y * unitLat;\n  const west  = cellLv1.west  + x * unitLon;\n  return { south, west, unitLat, unitLon };\n}\n\nfunction _toMeshPoint8000(meshCode) {\n  const cellLv1 = _toMeshPointLv1(meshCode);\n  const y = parseInt(meshCode.charAt(4));\n  const x = parseInt(meshCode.charAt(5));\n  const unitLat = _unit8000Lat;\n  const unitLon = _unit8000Lon;\n  const south = cellLv1.south + y * unitLat;\n  const west  = cellLv1.west  + x * unitLon;\n  return { south, west, unitLat, unitLon };\n}\n\nfunction _toMeshPoint5000(meshCode) {\n  const cellLv2 = _toMeshPointLv2(meshCode);\n  const c = parseInt(meshCode.charAt(6)) - 1;\n  const y = Math.floor(c / 2);\n  const x = c % 2;\n  const unitLat = _unit5000Lat;\n  const unitLon = _unit5000Lon;\n  const south = cellLv2.south + y * _unit5000Lat;\n  const west  = cellLv2.west  + x * _unit5000Lon;\n  return { south, west, unitLat, unitLon };\n}\n\nfunction _toMeshPoint4000(meshCode) {\n  const cell8000 = _toMeshPoint8000(meshCode);\n  const c = parseInt(meshCode.charAt(7)) - 1;\n  const y = Math.floor(c / 2);\n  const x = c % 2;\n  const unitLat = _unit4000Lat;\n  const unitLon = _unit4000Lon;\n  const south = cell8000.south + y * unitLat;\n  const west  = cell8000.west  + x * unitLon;\n  return { south, west, unitLat, unitLon };\n}\n\nfunction _toMeshPoint2500(meshCode) {\n  const cell5000 = _toMeshPoint5000(meshCode);\n  const c = parseInt(meshCode.charAt(7)) - 1;\n  const y = Math.floor(c / 2);\n  const x = c % 2;\n  const unitLat = _unit2500Lat;\n  const unitLon = _unit2500Lon;\n  const south = cell5000.south + y * unitLat;\n  const west  = cell5000.west  + x * unitLon;\n  return { south, west, unitLat, unitLon };\n}\n\nfunction _toMeshPoint2000(meshCode) {\n  const cellLv2 = _toMeshPointLv2(meshCode);\n  const y = parseInt(meshCode.charAt(6)) / 2;\n  const x = parseInt(meshCode.charAt(7)) / 2;\n  const unitLat = _unit2000Lat;\n  const unitLon = _unit2000Lon;\n  const south = cellLv2.south + y * unitLat;\n  const west  = cellLv2.west  + x * unitLon;\n  return { south, west, unitLat, unitLon };\n}\n\nconst _toMeshPointProcs = {\n  1: _toMeshPointLv1,\n  2: _toMeshPointLv2,\n  3: _toMeshPointLv3,\n  4: _toMeshPointLv4,\n  5: _toMeshPointLv5,\n  6: _toMeshPointLv6,\n  40000: _toMeshPoint40000,\n  20000: _toMeshPoint20000,\n  16000: _toMeshPoint16000,\n  8000: _toMeshPoint8000,\n  5000: _toMeshPoint5000,\n  4000: _toMeshPoint4000,\n  2500: _toMeshPoint2500,\n  2000: _toMeshPoint2000,\n};\n\nfunction toMeshPoint(meshCode, latMultiplier = 0, lonMultiplier = 0) {\n  meshCode = String(meshCode);\n  const level = toMeshLevel(meshCode);\n  const { south, west, unitLat, unitLon } = _toMeshPointProcs[level](meshCode);\n  const lat = south + latMultiplier * unitLat;\n  const lon = west  + lonMultiplier * unitLon;\n  return [lat, lon];\n}\n\nmodule.exports = {\n  toMeshCode,\n  toMeshPoint,\n  toMeshLevel,\n};\n"],"sourceRoot":""}